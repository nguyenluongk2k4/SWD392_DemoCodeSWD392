# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import actuator_pb2 as actuator__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in actuator_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ActuatorManagerServiceStub(object):
    """=======================================================
    SERVICE DEFINITION
    Định nghĩa các RPC (Remote Procedure Call) mà server cung cấp
    =======================================================

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ControlActuator = channel.unary_unary(
                '/smart_agriculture.v1.ActuatorManagerService/ControlActuator',
                request_serializer=actuator__pb2.ControlActuatorRequest.SerializeToString,
                response_deserializer=actuator__pb2.ControlActuatorResponse.FromString,
                _registered_method=True)
        self.GetActuatorStatus = channel.unary_unary(
                '/smart_agriculture.v1.ActuatorManagerService/GetActuatorStatus',
                request_serializer=actuator__pb2.GetActuatorStatusRequest.SerializeToString,
                response_deserializer=actuator__pb2.Actuator.FromString,
                _registered_method=True)
        self.ListActuators = channel.unary_unary(
                '/smart_agriculture.v1.ActuatorManagerService/ListActuators',
                request_serializer=actuator__pb2.ListActuatorsRequest.SerializeToString,
                response_deserializer=actuator__pb2.ListActuatorsResponse.FromString,
                _registered_method=True)


class ActuatorManagerServiceServicer(object):
    """=======================================================
    SERVICE DEFINITION
    Định nghĩa các RPC (Remote Procedure Call) mà server cung cấp
    =======================================================

    """

    def ControlActuator(self, request, context):
        """Gửi một lệnh điều khiển đến một actuator cụ thể (bật/tắt)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetActuatorStatus(self, request, context):
        """Lấy thông tin trạng thái chi tiết của một actuator
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListActuators(self, request, context):
        """Lấy danh sách các actuator theo một farm hoặc zone
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ActuatorManagerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ControlActuator': grpc.unary_unary_rpc_method_handler(
                    servicer.ControlActuator,
                    request_deserializer=actuator__pb2.ControlActuatorRequest.FromString,
                    response_serializer=actuator__pb2.ControlActuatorResponse.SerializeToString,
            ),
            'GetActuatorStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetActuatorStatus,
                    request_deserializer=actuator__pb2.GetActuatorStatusRequest.FromString,
                    response_serializer=actuator__pb2.Actuator.SerializeToString,
            ),
            'ListActuators': grpc.unary_unary_rpc_method_handler(
                    servicer.ListActuators,
                    request_deserializer=actuator__pb2.ListActuatorsRequest.FromString,
                    response_serializer=actuator__pb2.ListActuatorsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'smart_agriculture.v1.ActuatorManagerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('smart_agriculture.v1.ActuatorManagerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ActuatorManagerService(object):
    """=======================================================
    SERVICE DEFINITION
    Định nghĩa các RPC (Remote Procedure Call) mà server cung cấp
    =======================================================

    """

    @staticmethod
    def ControlActuator(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/smart_agriculture.v1.ActuatorManagerService/ControlActuator',
            actuator__pb2.ControlActuatorRequest.SerializeToString,
            actuator__pb2.ControlActuatorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetActuatorStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/smart_agriculture.v1.ActuatorManagerService/GetActuatorStatus',
            actuator__pb2.GetActuatorStatusRequest.SerializeToString,
            actuator__pb2.Actuator.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListActuators(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/smart_agriculture.v1.ActuatorManagerService/ListActuators',
            actuator__pb2.ListActuatorsRequest.SerializeToString,
            actuator__pb2.ListActuatorsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
